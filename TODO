TODO
====

Before v1.0 release:
====================
- Late Move Pruning (LMP)
- LMR with !givesCheck
- SF-redux
- Koivisto aspiration window: d < 6 no aspiration, d > 5 windowSize = 25 or 50
- Release 1.0
- Submit to CCRL



Backlog for v1.1:
=================
- Sygyzy tablebases 
    - Fathom/fathom.c at master · jdart1/Fathom · GitHub
- Static Exchange Evaluation (SEE)
- book / learn solution, using Stockfish 14.1+ depth=50 multipv=8 (engine vs external solution) 



Backlog for v2.0:
=================
- Try dperft() with async for each move. How much faster? Does it count the total no. of nodes?
- Multi-threaded search
- Pondering 


Backlog for v3.0:
=================
- Update NNUE to SFNNv5 architecture
- Use incremental / accumulator for performance (~20% faster)
- More up-to-date library? --> https://github.com/jdart1/nnue

￼

Notes for future features:
==========================
- pondering: https://web.archive.org/web/20071027053527/http://www.brucemo.com/compchess/programming/pondering.htm
  - use async to ponder (make move and search infinite to fill the cache) 

- lazy SMP: try with thread_local (minimum modifications). Otherwise:
    - call search() with async Threads-1 times 
    - half of the threads use depth, half use depth+1 
    - Each thread needs its own copy of modifiable structures (pv_table, followPV, allowNull, killers, history)
    - Position should be encapsulated into pos Struct, cannot share one global set of variables: bit boards, fifty, ply, occupancies, sideToMove, castling, castling_rights, etc
    - Modify saveBoard() and takeBack() to update own copies of pos Struct
    - Start by testing all “reentrant changes” with only the main thread. Make it work. Measure performance.
    - Then start to add threads. 
    - thread_local for variables used by all search threads

- book / learn:
    - built-in vs. external
    - Stockfish/src/book.py - depth=50 multipv=8
    - r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  | d5e6 e2a6
