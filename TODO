TODO
====

Before release 1.0:
-------------------
- fine-tuning — tests with tournaments:
    - Null move R3d6 vs R3d4 vs R3d2
    - Aspiration window size: 25, 50, 75, 100, etc.
    - QSearch updates pv_table vs. only update in negamax
    - Store null move in TT vs. don't store it -- if (bestmove) TT::save()
    - allowNull vs. (always allow)
    - don't do Null move if !pv_node  vs.  do it always (also in PV)
    - Time control: movestogo=40 vs. movestogo=30
    - Razor ala Stockfish vs. Razor ala BBC vs. BOTH
    - Razor bonuses (125, 175, etc)

- TC 120+1s inc stays in minute 01:00 and doesn't use the time, should use it!
- futility pruning (e.g., Blunder)
- Late move pruning (e.g., Blunder)
- other reductions/search optimizations (look at list from Blunder and Stockfish, in their search)
- bug: cannot mate KRK when short in time
  --> cannot mate me! position: 8/8/2k5/8/8/6R1/5K2/8 w - - 0 1



Infinity wars:
--------------
- pondering: https://web.archive.org/web/20071027053527/http://www.brucemo.com/compchess/programming/pondering.htm
  - use async to ponder (make move and search infinite to fill the cache) 

- lazy SMP: try with thread_local (minimum modifications). Otherwise:
    - call search() with async Threads-1 times 
    - half of the threads use depth, half use depth+1 
    - Each thread needs its own copy of modifiable structures (pv_table, followPV, allowNull, killers, history)
    - Position should be encapsulated into pos Struct, cannot share one global set of variables: bit boards, fifty, ply, occupancies, sideToMove, castling, castling_rights, etc
    - Modify saveBoard() and takeBack() to update own copies of pos Struct
    - Start by testing all “reentrant changes” with only the main thread. Make it work. Measure performance.
    - Then start to add threads. 
    - thread_local for variables used by all search threads

- static exchange evaluation (SEE) for ordering captures in qsearch()

- book: built-in vs. external
  r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  | d5e6 e2a6

- improve NNUE:
  - Update to newest library (half-K)
  - Use incremental / accumulator for performance
  - https://github.com/jdart1/nnue
