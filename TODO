TODO
====

Before v1.0 release:
====================
- Test bench (300 games, TC 10min):
  - Test one more time futility vs. classical (no futility)
- Commit with futility
- Try !givesCheck within LMR
- Try Late move pruning (LMP):
    - MadChess 3.0 Beta 6f3d17a (Late Move Pruning): https://www.madchess.net/2020/02/08/madchess-3-0-beta-4478cb8-late-move-pruning/
    - Crafty: https://github.com/MichaelB7/Crafty/blob/5501aa243bcb5fcf170791dd240017675960d152/src/search.c#L540
- review Stockfish skeleton 
- other possible optimizations 
- Run benchmark.py against Blunder, Crafty, Chess0 and BBC-1.4
- Release 1.0
- Submit to CCRL



Backlog for v1.1:
=================
- Sygyzy tablebases 
    - Fathom/fathom.c at master · jdart1/Fathom · GitHub
- Static Exchange Evaluation
- book / learn solution, using Stockfish 14.1+ depth=50 multipv=8 (engine vs external solution) 



Backlog for v2.0:
=================
- Try dperft() with async for each move. How much faster? Does it count the total no. of nodes?
- Multi-threaded search
- Pondering 


Backlog for v3.0:
=================
- New NNUE (half-k) architecture
- Use incremental / accumulator for performance (18% faster)
- More up-to-date library --> https://github.com/jdart1/nnue

￼

Notes for future features:
==========================
- pondering: https://web.archive.org/web/20071027053527/http://www.brucemo.com/compchess/programming/pondering.htm
  - use async to ponder (make move and search infinite to fill the cache) 

- lazy SMP: try with thread_local (minimum modifications). Otherwise:
    - call search() with async Threads-1 times 
    - half of the threads use depth, half use depth+1 
    - Each thread needs its own copy of modifiable structures (pv_table, followPV, allowNull, killers, history)
    - Position should be encapsulated into pos Struct, cannot share one global set of variables: bit boards, fifty, ply, occupancies, sideToMove, castling, castling_rights, etc
    - Modify saveBoard() and takeBack() to update own copies of pos Struct
    - Start by testing all “reentrant changes” with only the main thread. Make it work. Measure performance.
    - Then start to add threads. 
    - thread_local for variables used by all search threads

- book / learn:
    - built-in vs. external
    - Stockfish/src/book.py - depth=50 multipv=8
    - r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -  | d5e6 e2a6
